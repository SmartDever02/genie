generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model datasets {
  id        Int      @id @default(autoincrement())
  htmlIndex Int      @unique
  content   String   @db.Text
  updatedAt DateTime @default(now())
}

model payloads {
  id           Int      @id @default(autoincrement())
  htmlIndex    Int
  variantIndex Int
  content      String   @db.Text
  model        GPTModel @default(GPT4o)

  @@unique([htmlIndex, variantIndex]) // Composite unique constraint
}

model scores {
  id                   Int      @id @default(autoincrement())
  model                GPTModel @default(GPT4o)
  htmlIndex            Int
  groundTruthHtmlIndex Int
  visualScores         Float[]
  lighthouseScores     Float[]

  updatedAt DateTime @default(now())

  @@unique([groundTruthHtmlIndex, htmlIndex]) // Composite unique constraint
}

model maps {
  id            Int           @id @default(autoincrement())
  model         GPTModel      @default(GPT4o)
  challangeType ChallengeType @default(ACCURACY)
  htmlIndex     Int
  indexes       Int[]
  avgScores     Float[]

  @@unique([htmlIndex, challangeType]) // Composite unique constraint
}

model imagehash {
  id        Int    @id @default(autoincrement())
  htmlIndex Int    @unique
  imageHash String
  taskId    String @unique @default("")
}

model logs {
  id                  Int      @id @default(autoincrement())
  taskId              String   @default("")
  htmlIndex           Int?
  currentPayloadCount Int?
  expectedScore       Float?
  imageHash           String?
  challengeType       String?
  logType             LogType  @default(SYNAPSE)
  timestamp           DateTime @default(now())
}

enum ChallengeType {
  ACCURACY
  LIGHTHOUSE
  BALANCED
}

enum LogType {
  SYNAPSE
}

enum GPTModel {
  GPT4o
  GPT4oMini
}
